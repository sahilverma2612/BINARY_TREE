#include<iostream>
#include<queue>
using namespace std;
class node{
	public:
		int data;
		node* left;
		node* right;
		
		node(int data){
			this->data = data;
			this->left = NULL;
			this->right = NULL;
		}
};
node* buildTree(node* root){		//DEPTH ORDER TRAVERSAL
	cout<<"Enter the data:"<<endl;
	int data;
	cin>>data;
	root=new node(data);
	if(data==-1){
		return NULL;
	}
	cout<<"Enter data for insertion in left="<<data<<endl;
	root->left = buildTree(root->left);
	cout<<"Enter data for insertion in right="<<data<<endl;
	root->right = buildTree(root->right);
	return root;
}
void levelOrderTraversal(node* root){	//BREADTH ORDER TRAVERSAL	
		//USING QUEUE
		queue<node*> q;
		 q.push(root);
		 q.push(NULL);
		 while(!q.empty())  {
		 	node* temp = q.front();
		 	q.pop();
		 	
			 if(temp==NULL){
			 	cout<<endl;
			 	if(!q.empty()){
			 		q.push(NULL);
				 }
			 }
			 else{
			 		cout<<temp->data<<" ";
			 	if(temp->left){
		 		q.push(temp->left);
			 }
			if(temp->right){
			 	q.push(temp->right);
			 }
			 }
		 }
}
void inOrder(node* root){	//LNR
	if(root == NULL){
		return;
	}
	inOrder(root->left);
	cout<<root->data<<" ";
	inOrder(root->right);	
}
void preOrder(node* root){	//NLR
	if(root==NULL){
		return;
	}
	cout<<root->data<<" ";
	
		preOrder(root->left);
		preOrder(root->right);
}
void postOrder(node* root){	//LRN    
	if(root==NULL){
		return;
	}
	postOrder(root->left);
	postOrder(root->right);
	cout<<root->data<<" ";
}
int main(){
	node* root = NULL;                                            //level order                //INORDER:-  L N R
	root=buildTree(root);                                         //  1                        //  4  2  5  1  6  3  7
	cout<<"Printing the levelorder traversal\n";                  //  2  3                     //PREORDER:--  N L R
	levelOrderTraversal(root);                                    //  4  5  6  7               //   1  2  4  5  3  6  7
	cout<<"Printing the inorder traversal\n";                                                   //POSTORDER:-  L R N
	inOrder(root);                                                                              //  4  5  2  6  7  3  1
	cout<<"\nPrinting the preOrder traversal\n";
	preOrder(root);
	cout<<"\nPrinting the postOrder traversal\n";
	postOrder(root);
	return 0;
}
